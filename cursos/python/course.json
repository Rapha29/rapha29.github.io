{"viewCount":0,"category":"Programming","languageId":"pt-BR","keywords":{"keyword5":"functions","keyword1":"Python","keyword2":"programming","keyword3":"beginners","keyword4":"variables"},"overview":{"content":"Este curso introdutório de Python destina-se a iniciantes sem experiência prévia em programação. Você aprenderá os conceitos básicos de programação, como trabalhar com variáveis, funções, loops e condicionais, além de entender melhor o que é a programação orientada a objetos. O objetivo é desenvolver habilidades para criar programas simples e eficientes utilizando a linguagem Python.","title":"Visão geral"},"name":"Introdução à Programação com Python","headline":"Aprenda a programar em uma das linguagens mais populares do mundo!","version":4,"sections":{"module3":{"blocks":{"LRXaHkW88H":{"title":"Conclusão - Programação Orientada a Objetos","content":"Neste módulo, você aprendeu sobre programação orientada a objetos em Python e como criar classes, objetos, atributos e métodos. Também aprendeu sobre conceitos importantes como herança e encapsulamento. Agora você pode usar esses conceitos para criar programas mais organizados e reutilizáveis em Python. Lembre-se de praticar bastante e experimentar diferentes tipos de classes e objetos!","type":"highlight","order":2},"4tYdnct29I":{"order":1,"html":"<p>Neste módulo, você aprenderá sobre programação orientada a objetos em Python. A programação orientada a objetos é um paradigma de programação que enfatiza o uso de objetos, que são instâncias de classes, para representar e manipular dados.</p>\n<h2>Classes e objetos</h2>\n<p>Em Python, uma classe é definida usando a palavra-chave <code>class</code>. Aqui está um exemplo simples:</p>\n<pre><code>class Pessoa:\n    def __init__(self, nome, idade):\n        self.nome = nome\n        self.idade = idade\n</code></pre>\n<p>Esta classe define uma pessoa com um nome e idade. O método <code>__init__()</code> é o construtor da classe, que é chamado quando um objeto é criado. O parâmetro <code>self</code> se refere ao próprio objeto.</p>\n<p>Para criar um objeto dessa classe, basta chamar o construtor e passar os valores desejados para o nome e idade:</p>\n<pre><code>pessoa1 = Pessoa(&quot;João&quot;, 25)\n</code></pre>\n<p>Agora, <code>pessoa1</code> é um objeto da classe <code>Pessoa</code>.</p>\n<h2>Atributos e métodos</h2>\n<p>Os objetos têm atributos, que são variáveis que pertencem ao objeto, e métodos, que são funções que pertencem ao objeto. Aqui está um exemplo de como adicionar um método à classe <code>Pessoa</code> anteriormente definida:</p>\n<pre><code>class Pessoa:\n    def __init__(self, nome, idade):\n        self.nome = nome\n        self.idade = idade\n    \n    def saudacao(self):\n        print(&quot;Olá, meu nome é &quot; + self.nome + &quot; e eu tenho &quot; + str(self.idade) + &quot; anos.&quot;)\n</code></pre>\n<p>Este método <code>saudacao()</code> imprime uma mensagem de saudação com o nome e idade da pessoa.</p>\n<p>Para chamar este método para o objeto <code>pessoa1</code>, basta usar a notação ponto:</p>\n<pre><code>pessoa1.saudacao()\n</code></pre>\n<p>Isso imprimirá a mensagem &quot;Olá, meu nome é João e eu tenho 25 anos.&quot; na tela.</p>\n<h2>Herança</h2>\n<p>A herança é um conceito importante na programação orientada a objetos, que permite criar classes que herdam atributos e métodos de outras classes. Isso pode ajudar a tornar seu código mais organizado e reutilizável.</p>\n<p>Aqui está um exemplo de como criar uma classe <code>Aluno</code> que herda da classe <code>Pessoa</code> anteriormente definida:</p>\n<pre><code>class Aluno(Pessoa):\n    def __init__(self, nome, idade, matricula):\n        super().__init__(nome, idade)\n        self.matricula = matricula\n</code></pre>\n<p>A classe <code>Aluno</code> tem todos os atributos e métodos da classe <code>Pessoa</code>, bem como um novo atributo <code>matricula</code>. Usamos a função <code>super()</code> para chamar o construtor da classe pai e inicializar seus atributos.</p>\n<h2>Encapsulamento</h2>\n<p>O encapsulamento é outro conceito importante na programação orientada a objetos, que permite ocultar a implementação interna de uma classe dos usuários externos. Em Python, isso é feito usando o prefixo <code>_</code> no nome do atributo ou método para indicar que ele deve ser tratado como privado.</p>\n<p>Por exemplo, aqui está uma classe <code>ContaBancaria</code> que usa encapsulamento:</p>\n<pre><code>class ContaBancaria:\n    def __init__(self, saldo):\n        self._saldo = saldo\n    \n    def depositar(self, valor):\n        self._saldo += valor\n    \n    def sacar(self, valor):\n        if self._saldo &gt;= valor:\n            self._saldo -= valor\n        else:\n            print(&quot;Saldo insuficiente.&quot;)\n    \n    def get_saldo(self):\n        return self._saldo\n</code></pre>\n<p>O atributo <code>_saldo</code> é privado e só pode ser acessado dentro da classe. O método <code>get_saldo()</code> é fornecido para permitir que os usuários externos acessem o saldo.</p>","type":"html"}},"order":3,"slug":"poo","short":"POO","name":"Programação Orientada a Objetos"},"module2":{"order":2,"slug":"controle","blocks":{"4CMqv10NQ2":{"order":1,"html":"<p>Neste módulo, você aprenderá sobre as estruturas de controle em Python. As estruturas de controle são usadas para controlar o fluxo do seu programa e tomam decisões com base em condições específicas. Existem três tipos principais de estruturas de controle em Python: <code>if</code>, <code>for</code> e <code>while</code>.</p>\n<h2>Estrutura <code>if</code></h2>\n<p>A estrutura <code>if</code> é usada para executar um bloco de código se uma determinada condição for verdadeira. Aqui está um exemplo:</p>\n<pre><code>idade = 18\n\nif idade &gt;= 18:\n    print(&quot;Você já pode votar!&quot;)\n</code></pre>\n<p>Isso imprimirá &quot;Você já pode votar!&quot; na tela, já que a idade é igual a 18 ou maior.</p>\n<p>Se a condição não for verdadeira, o bloco de código dentro do <code>if</code> não será executado. No entanto, você pode adicionar uma cláusula <code>else</code> para executar um bloco de código diferente se a condição não for verdadeira:</p>\n<pre><code>idade = 16\n\nif idade &gt;= 18:\n    print(&quot;Você já pode votar!&quot;)\nelse:\n    print(&quot;Você ainda não pode votar.&quot;)\n</code></pre>\n<p>Isso imprimirá &quot;Você ainda não pode votar.&quot; na tela, já que a idade é menor do que 18.</p>\n<h2>Estrutura <code>for</code></h2>\n<p>A estrutura <code>for</code> é usada para iterar sobre uma sequência de valores, como uma lista ou uma string. Aqui está um exemplo:</p>\n<pre><code>nomes = [&quot;João&quot;, &quot;Maria&quot;, &quot;Pedro&quot;]\n\nfor nome in nomes:\n    print(nome)\n</code></pre>\n<p>Isso imprimirá cada nome na lista <code>nomes</code> na tela.</p>\n<p>Você também pode combinar a estrutura <code>for</code> com a função <code>range()</code> para iterar um número específico de vezes:</p>\n<pre><code>for i in range(5):\n    print(i)\n</code></pre>\n<p>Isso imprimirá uma sequência de números de 0 a 4 na tela.</p>\n<h2>Estrutura <code>while</code></h2>\n<p>A estrutura <code>while</code> é usada para executar um bloco de código enquanto uma determinada condição for verdadeira. Aqui está um exemplo:</p>\n<pre><code>i = 0\n\nwhile i &lt; 5:\n    print(i)\n    i += 1\n</code></pre>\n<p>Isso imprimirá uma sequência de números de 0 a 4 na tela, já que o bloco de código dentro do <code>while</code> será executado enquanto <code>i</code> for menor que 5.</p>\n<p>É importante ter cuidado ao usar a estrutura <code>while</code>, pois se a condição nunca for falsa, seu programa entrará em um loop infinito e nunca terminará.</p>","type":"html"},"6KUdN96KeW":{"title":"Conclusão - Estruturas de Controle","content":"Neste módulo, você aprendeu sobre as estruturas de controle em Python, incluindo a estrutura `if` para tomar decisões com base em condições, a estrutura `for` para iterar sobre uma sequência de valores e a estrutura `while` para executar um bloco de código enquanto uma condição for verdadeira. Agora você pode usar essas estruturas para controlar o fluxo do seu programa e torná-lo mais eficiente e flexível. Lembre-se de praticar bastante e experimentar diferentes tipos de estruturas de controle!","order":2,"type":"highlight"}},"name":"Estruturas de Controle","short":"Controle"},"wrapup":{"order":5,"name":"Resumo","slug":"wrapup","headline":"Vamos revisar o que acabamos de ver até agora","blocks":{"VEDYtu7CnQ":{"items":{"con_3Y4oJ3UgsB":{"order":2,"title":"Estruturas de Controle","content":"Neste módulo, você aprendeu sobre as estruturas de controle em Python, incluindo a estrutura `if` para tomar decisões com base em condições, a estrutura `for` para iterar sobre uma sequência de valores e a estrutura `while` para executar um bloco de código enquanto uma condição for verdadeira. Agora você pode usar essas estruturas para controlar o fluxo do seu programa e torná-lo mais eficiente e flexível. Lembre-se de praticar bastante e experimentar diferentes tipos de estruturas de controle!"},"con_NV8DoEA8Om":{"content":"Neste módulo, você aprendeu sobre programação orientada a objetos em Python e como criar classes, objetos, atributos e métodos. Também aprendeu sobre conceitos importantes como herança e encapsulamento. Agora você pode usar esses conceitos para criar programas mais organizados e reutilizáveis em Python. Lembre-se de praticar bastante e experimentar diferentes tipos de classes e objetos!","order":3,"title":"Programação Orientada a Objetos"},"con_67eXPRqEDz":{"title":"Introdução ao Python","order":1,"content":"Neste módulo introdutório, você aprendeu os conceitos básicos do Python, incluindo tipos de dados, variáveis, operadores e funções. Agora você está pronto para começar a escrever seus próprios programas em Python! Lembre-se de praticar bastante e não tenha medo de cometer erros - é assim que se aprende a programar."}},"order":1,"type":"list"}},"short":"Resumo"},"practice":{"name":"Exercícios Práticos","order":4,"blocks":{"xzAYaRK3zM":{"type":"list","items":{"xLRvLh4gnL":{"title":"Verificação da idade para votar","order":2,"content":"Solicite a idade do usuário e use a estrutura de controle `if` para verificar se ele pode votar (idade igual ou maior que 18 anos). Se puder votar, imprima a mensagem 'Você já pode votar!'. Caso contrário, imprima a mensagem 'Você ainda não pode votar.'."},"CeRywg4XRC":{"content":"Crie uma classe `Carro` com os atributos `marca`, `modelo` e `ano`. Crie um método `descricao()` que imprime a descrição do carro na tela, incluindo a marca, modelo e ano. Crie um objeto dessa classe e chame o método `descricao()` para imprimir a descrição do carro.","title":"Criação de classes e objetos","order":3},"eK2QeTHYzH":{"content":"Crie uma variável para armazenar um número inteiro e outra para um número decimal. Realize operações matemáticas com essas variáveis, como adição, subtração, multiplicação e divisão. Imprima o resultado na tela.","order":1,"title":"Criação de variáveis e operações matemáticas"}},"order":2},"50Qqu8FYXq":{"html":"<p>Nesta lição, colocaremos a teoria em prática por meio de atividades práticas. Clique nos itens abaixo para conferir cada exercício e desenvolver habilidades práticas que o ajudarão a ter sucesso na disciplina.</p>","type":"html","order":1}},"headline":"Vamos colocar seus conhecimentos em prática","short":"Prática","slug":"practice"},"quiz":{"blocks":{"2EqpDVLrKp":{"type":"quiz","questions":{"que_hI8TSEFVUF":{"choices":{"cho_YBocruNo5r":{"choice":"3.3","order":1,"correct":true},"cho_A3anQsE7XS":{"correct":false,"order":2,"choice":"3"},"cho_VNro3LR3HP":{"correct":false,"choice":"4","order":3}},"order":4,"question":"Qual é o resultado da operação 10 / 3 em Python?"},"que_QitP4Jye9I":{"order":2,"choices":{"cho_nqOsTiPucW":{"choice":"while","order":3,"correct":false},"cho_gYGNq9fa8H":{"order":1,"correct":false,"choice":"if"},"cho_QZ0hjecsFd":{"order":2,"correct":true,"choice":"for"}},"question":"Qual a estrutura de controle usada para iterar sobre uma sequência de valores?"},"que_sUaUlL79em":{"choices":{"cho_q0ANsXul4J":{"choice":"Polimorfismo","correct":false,"order":3},"cho_P7PbC2aaUJ":{"correct":true,"choice":"Encapsulamento","order":1},"cho_1lLauSuC3K":{"order":2,"correct":false,"choice":"Herança"}},"question":"Qual é o conceito que permite ocultar a implementação interna de uma classe dos usuários externos?","order":3},"que_AjGMQqRsqj":{"order":1,"choices":{"cho_9eVmSli0NS":{"order":3,"correct":false,"choice":"objeto"},"cho_eHZ3nlIThq":{"choice":"class","correct":true,"order":2},"cho_zCsLj0kB1z":{"choice":"def","correct":false,"order":1}},"question":"Qual a palavra-chave usada para definir uma classe em Python?"},"que_aXNynVHGGB":{"choices":{"cho_EaZE78UoOT":{"order":2,"choice":"__init__","correct":true},"cho_oOuPWC3b1s":{"choice":"__str__","correct":false,"order":3},"cho_gSX9WRVE98":{"order":1,"choice":"__new__","correct":false}},"order":6,"question":"Qual é o nome do método especial usado como construtor de uma classe em Python?"},"que_frNYy4zeAJ":{"question":"Qual a estrutura de controle usada para executar um bloco de código enquanto uma determinada condição for verdadeira?","choices":{"cho_MS2M7r1ltb":{"order":2,"correct":false,"choice":"for"},"cho_WZStrjtHWn":{"order":3,"choice":"while","correct":true},"cho_YoYmBuBcb2":{"order":1,"correct":false,"choice":"if"}},"order":5}},"order":1}},"order":6,"short":"Questionário","name":"Questionário","headline":"Verifique seu conhecimento respondendo a algumas perguntas","slug":"quiz"},"module1":{"name":"Introdução ao Python","order":1,"short":"Introdução","slug":"introducao","blocks":{"GlVIYnoKM3":{"order":1,"html":"<p>Neste módulo introdutório, você aprenderá os conceitos básicos da linguagem de programação Python. Python é uma das linguagens mais populares do mundo devido à sua simplicidade e flexibilidade. Sua sintaxe clara e legível torna-a fácil de entender e escrever, tornando-a uma ótima opção para iniciantes.</p>\n<h2>O que é Python?</h2>\n<p>Python é uma linguagem de programação interpretada de alto nível, criada por Guido van Rossum em 1991. É frequentemente utilizada em desenvolvimento web, ciência de dados, inteligência artificial e outras áreas de computação. Sua popularidade se deve à sua facilidade de aprendizado e uso, além de ser gratuita e de código aberto.</p>\n<h2>Instalando e executando o Python</h2>\n<p>Antes de começar a programar em Python, você precisa instalar um ambiente de desenvolvimento Python. Existem várias opções disponíveis, mas as duas mais comuns são o IDLE (ambiente de desenvolvimento integrado) e o Jupyter Notebook. Ambos são gratuitos e fáceis de usar.</p>\n<p>Após instalar o Python e escolher o seu ambiente de desenvolvimento, você pode executar o Python digitando <code>python</code> no seu terminal. Isso abrirá o interpretador do Python, onde você poderá digitar os comandos diretamente na linha de comando.</p>\n<h2>Tipos de dados</h2>\n<p>Em Python, existem vários tipos de dados que podem ser usados para armazenar informações, como números, strings e booleanos. Aqui estão alguns exemplos:</p>\n<ul>\n<li>Números inteiros: <code>42</code></li>\n<li>Números decimais (float): <code>3.14</code></li>\n<li>Strings: <code>&quot;Olá, mundo!&quot;</code></li>\n<li>Booleanos: <code>True</code> ou <code>False</code></li>\n</ul>\n<h2>Variáveis</h2>\n<p>Variáveis são usadas em Python para armazenar valores. Para criar uma variável, você precisa escolher um nome para ela e atribuir um valor a ela usando o operador de atribuição <code>=</code>. Aqui está um exemplo:</p>\n<pre><code>nome = &quot;João&quot;\nidade = 25\n</code></pre>\n<h2>Operadores</h2>\n<p>Operadores são usados em Python para realizar cálculos matemáticos e comparar valores. Aqui estão alguns exemplos de operadores matemáticos:</p>\n<ul>\n<li>Adição: <code>+</code></li>\n<li>Subtração: <code>-</code></li>\n<li>Multiplicação: <code>*</code></li>\n<li>Divisão: <code>/</code></li>\n</ul>\n<p>E aqui estão alguns exemplos de operadores de comparação:</p>\n<ul>\n<li>Igualdade: <code>==</code></li>\n<li>Maior que: <code>&gt;</code></li>\n<li>Menor que: <code>&lt;</code></li>\n<li>Maior ou igual a: <code>&gt;=</code></li>\n<li>Menor ou igual a: <code>&lt;=</code></li>\n</ul>\n<h2>Funções</h2>\n<p>Funções são blocos de código reutilizáveis que realizam uma tarefa específica. Em Python, as funções são definidas usando a palavra-chave <code>def</code>, seguida do nome da função e dos parâmetros entre parênteses. Aqui está um exemplo de uma função que imprime uma mensagem na tela:</p>\n<pre><code>def saudacao(nome):\n    print(&quot;Olá, &quot; + nome + &quot;!&quot;)\n</code></pre>\n<p>Você pode chamar a função passando um nome como argumento:</p>\n<pre><code>saudacao(&quot;João&quot;)\n</code></pre>\n<p>Isso imprimirá a mensagem &quot;Olá, João!&quot; na tela.</p>","type":"html"},"TgWESXBvc4":{"title":"Conclusão - Introdução ao Python","order":2,"type":"highlight","content":"Neste módulo introdutório, você aprendeu os conceitos básicos do Python, incluindo tipos de dados, variáveis, operadores e funções. Agora você está pronto para começar a escrever seus próprios programas em Python! Lembre-se de praticar bastante e não tenha medo de cometer erros - é assim que se aprende a programar."}}}},"id":"j5bEzFzyQPh64i7trN57","createdAt":"2023-05-31T05:56:40.349Z","conclusion":{"title":"Conclusão","content":"Parabéns por concluir este curso! Você deu um passo importante para liberar todo o seu potencial. Concluir este curso não é apenas adquirir conhecimento; trata-se de colocar esse conhecimento em prática e causar um impacto positivo no mundo ao seu redor."},"colorScheme":"orange"}