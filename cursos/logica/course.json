{"name":"Lógica de Programação","version":4,"createdAt":"2023-05-31T06:09:31.518Z","viewCount":0,"category":"Programming","colorScheme":"blue","headline":"Aprenda a pensar como um programador!","conclusion":{"content":"Parabéns por concluir este curso! Você deu um passo importante para liberar todo o seu potencial. Concluir este curso não é apenas adquirir conhecimento; trata-se de colocar esse conhecimento em prática e causar um impacto positivo no mundo ao seu redor.","title":"Conclusão"},"id":"WlwdOJrjl7EfwmWw74iS","languageId":"pt-BR","overview":{"title":"Visão geral","content":"Este curso é uma introdução à lógica de programação, que é a base para entender como os programas funcionam. Vamos aprender a pensar de forma estruturada e a resolver problemas usando algoritmos. Não é necessário ter conhecimento prévio em programação."},"keywords":{"keyword4":"Functions","keyword5":"Modularization","keyword2":"Algorithms","keyword1":"Programming logic","keyword3":"Control structures"},"sections":{"wrapup":{"slug":"wrapup","name":"Resumo","short":"Resumo","blocks":{"Al9jcYpY7t":{"order":1,"items":{"con_AB5vVWDvwO":{"content":"As estruturas de controle de fluxo são essenciais para qualquer programador que deseje criar programas mais complexos. Neste módulo, vimos várias estruturas de controle de fluxo, incluindo if/else, switch/case, operador ternário, break e continue. Com essas ferramentas em mãos, você poderá controlar o fluxo de execução do seu programa e resolver problemas de maneira mais eficiente.","title":"Estruturas de Controle","order":2},"con_RIzMJJz8AJ":{"order":3,"title":"Funções e Modularização","content":"Funções e modularização são ferramentas essenciais para qualquer programador que deseja escrever código claro, organizado e reutilizável. Neste módulo, vimos como criar funções, passar parâmetros, retornar valores, modularizar o código e importar módulos em diferentes linguagens de programação. Com esses conhecimentos em mãos, você estará pronto para escrever programas mais complexos e fáceis de manter."},"con_LeQJEIqsfW":{"title":"Introdução à Lógica de Programação","order":1,"content":"A lógica de programação é uma habilidade fundamental para qualquer pessoa que queira se tornar um programador. Neste módulo, vimos os conceitos básicos que você precisa saber para começar a escrever algoritmos e resolver problemas por meio da programação. Com esses conhecimentos em mãos, você estará pronto para avançar para os módulos seguintes e aprender a criar programas mais complexos."}},"type":"list"}},"order":5,"headline":"Vamos revisar o que acabamos de ver até agora"},"module2":{"order":2,"name":"Estruturas de Controle","blocks":{"MKub3Wrxr1":{"html":"<p>Estruturas de controle de fluxo são usadas em programação para controlar o fluxo de execução do programa. Elas permitem que o programa tome decisões com base nas condições definidas em seu código. Neste módulo, você aprenderá sobre as diferentes estruturas de controle de fluxo disponíveis em linguagens de programação.</p>\n<h2>If/Else</h2>\n<p>A estrutura if/else é usada para executar um bloco de código se uma determinada condição for verdadeira e outro bloco de código caso contrário. Por exemplo, se um usuário estiver logado, o programa exibirá uma mensagem de boas-vindas, caso contrário, ele será redirecionado para a página de login. Neste módulo, você aprenderá como usar a estrutura if/else em seu código e alguns exemplos de uso.</p>\n<h2>Switch/Case</h2>\n<p>A estrutura switch/case é semelhante à estrutura if/else, mas é usada quando há várias condições possíveis. Ela permite que o programa execute diferentes blocos de código com base no valor de uma variável. Por exemplo, se o usuário selecionar a opção &quot;Sair&quot; em um menu, o programa irá encerrar, se selecionar a opção &quot;Editar&quot;, será aberta a tela de edição. Neste módulo, você aprenderá como usar a estrutura switch/case em seu código e alguns exemplos de uso.</p>\n<h2>Operador Ternário</h2>\n<p>O operador ternário é uma forma simplificada da estrutura if/else. Ele permite que você execute uma instrução diferente com base em uma condição. Por exemplo, se a idade de um usuário for maior ou igual a 18 anos, o programa exibirá &quot;Maior de Idade&quot;, caso contrário, exibirá &quot;Menor de Idade&quot;. Neste módulo, você aprenderá como usar o operador ternário em seu código.</p>\n<h2>Break e Continue</h2>\n<p>Os comandos break e continue são usados em laços de repetição para controlar o fluxo de execução do programa. O comando break é usado para interromper completamente a execução de um laço de repetição quando uma determinada condição é atendida. Já o comando continue é usado para pular uma iteração específica do laço de repetição e continuar para a próxima. Neste módulo, você aprenderá como usar os comandos break e continue em seus laços de repetição.</p>","type":"html","order":1},"aXbdtazcte":{"type":"highlight","content":"As estruturas de controle de fluxo são essenciais para qualquer programador que deseje criar programas mais complexos. Neste módulo, vimos várias estruturas de controle de fluxo, incluindo if/else, switch/case, operador ternário, break e continue. Com essas ferramentas em mãos, você poderá controlar o fluxo de execução do seu programa e resolver problemas de maneira mais eficiente.","order":2,"title":"Conclusão - Estruturas de Controle"}},"slug":"controle","short":"Controle"},"module3":{"short":"Funções","name":"Funções e Modularização","slug":"funcoes","blocks":{"anmtjlLcAf":{"content":"Funções e modularização são ferramentas essenciais para qualquer programador que deseja escrever código claro, organizado e reutilizável. Neste módulo, vimos como criar funções, passar parâmetros, retornar valores, modularizar o código e importar módulos em diferentes linguagens de programação. Com esses conhecimentos em mãos, você estará pronto para escrever programas mais complexos e fáceis de manter.","title":"Conclusão - Funções e Modularização","type":"highlight","order":2},"ST5z5crjqX":{"order":1,"type":"html","html":"<p>Funções são uma das ferramentas mais importantes em programação. Elas permitem que você agrupe um conjunto de instruções para realizar uma tarefa específica e reaproveite esse código em várias partes do programa. Além disso, a modularização é uma técnica que consiste em dividir um programa em módulos menores e independentes que podem ser desenvolvidos e testados separadamente. Neste módulo, você aprenderá como criar funções e modularizar seu código em linguagens de programação.</p>\n<h2>Criando Funções</h2>\n<p>Para criar uma função, primeiro você precisa definir seu nome e quais argumentos ela receberá. Em seguida, você deve escrever o código que será executado quando a função for chamada. Por fim, você deve retornar o resultado da função, se houver. Neste módulo, você aprenderá como criar funções em diferentes linguagens de programação, incluindo Python, Java e JavaScript.</p>\n<h2>Passagem de Parâmetros</h2>\n<p>Os parâmetros são valores que são passados para uma função para que ela possa executar sua tarefa. Existem dois tipos principais de parâmetros: os parâmetros obrigatórios, que devem ser passados sempre que a função for chamada, e os parâmetros opcionais, que podem ser omitidos e têm um valor padrão definido. Neste módulo, você aprenderá como passar parâmetros para uma função e como definir parâmetros opcionais.</p>\n<h2>Retornando Valores</h2>\n<p>As funções podem retornar um valor para o programa que as chamou. O valor retornado pode ser usado em outras partes do programa ou armazenado em uma variável. Neste módulo, você aprenderá como retornar valores de uma função e como usá-los em seu código.</p>\n<h2>Modularização</h2>\n<p>A modularização é uma técnica que permite dividir um programa em módulos menores e independentes. Cada módulo pode ser desenvolvido e testado separadamente, o que torna mais fácil entender e manter o código. Neste módulo, você aprenderá como modularizar seu código e criar módulos reutilizáveis em diferentes linguagens de programação.</p>\n<h2>Importando Módulos</h2>\n<p>Para usar um módulo em seu código, você precisa importá-lo primeiro. A importação de um módulo permite que você use as funções definidas nele. Existem várias maneiras de importar um módulo em diferentes linguagens de programação, incluindo Python, Java e JavaScript. Neste módulo, você aprenderá como importar módulos e usar as funções definidas neles.</p>"}},"order":3},"practice":{"short":"Prática","blocks":{"owb2ftfUTT":{"items":{"viEm1e5l1W":{"content":"Crie um programa que receba o peso e a altura de uma pessoa e calcule seu índice de massa corporal (IMC).","order":1,"title":"Cálculo de IMC"},"QyIAhKWLHA":{"content":"Crie uma função que receba um número de CPF como argumento e informe se ele é válido ou não. Utilize os conceitos aprendidos na modularização para organizar seu código.","order":5,"title":"Validação de CPF"},"sKdnX2GcL8":{"content":"Crie um programa que converta uma temperatura em graus Celsius para Fahrenheit.","order":2,"title":"Conversão de Temperatura"},"7yzYgH2AiG":{"order":4,"title":"Soma dos Números Ímpares","content":"Crie um programa que calcule a soma dos números ímpares entre 1 e um número informado pelo usuário."},"TpliHue3et":{"title":"Calculadora","order":6,"content":"Crie uma calculadora simples que permita a realização das operações básicas (adição, subtração, multiplicação e divisão) por meio de funções. Utilize os conceitos aprendidos na modularização para organizar seu código."},"YVG18xdS8H":{"title":"Maior de Idade","content":"Crie um programa que pergunte ao usuário sua idade e informe se ele é maior ou menor de idade.","order":3}},"type":"list","order":2},"M4wIKJElGs":{"html":"<p>Nesta lição, colocaremos a teoria em prática por meio de atividades práticas. Clique nos itens abaixo para conferir cada exercício e desenvolver habilidades práticas que o ajudarão a ter sucesso na disciplina.</p>","order":1,"type":"html"}},"headline":"Vamos colocar seus conhecimentos em prática","slug":"practice","name":"Exercícios Práticos","order":4},"quiz":{"name":"Questionário","slug":"quiz","headline":"Verifique seu conhecimento respondendo a algumas perguntas","blocks":{"DXpjYAu1OH":{"order":1,"questions":{"que_A4H9ygo0sG":{"choices":{"cho_7jAFvJSBrT":{"correct":false,"order":3,"choice":"Operador Ternário"},"cho_WMSZtsvMHI":{"choice":"If/Else","correct":true,"order":1},"cho_ZlNLLZbLgs":{"correct":false,"choice":"Switch/Case","order":2}},"order":2,"question":"Qual é a estrutura de controle de fluxo usada para tomar decisões caso uma condição seja verdadeira ou falsa?"},"que_JozrNR25KB":{"order":3,"question":"Qual é a técnica que consiste em dividir um programa em módulos menores e independentes que podem ser desenvolvidos e testados separadamente?","choices":{"cho_ecJhzhs4wg":{"order":1,"correct":true,"choice":"Modularização"},"cho_JZ7l7Guwm8":{"choice":"Test-Driven Development","order":3,"correct":false},"cho_vCb4BKFQVT":{"order":2,"correct":false,"choice":"Programação Orientada a Objetos"}}},"que_WoaxHKBflz":{"choices":{"cho_M69VmAnTP8":{"correct":false,"order":3,"choice":"Operador Ternário"},"cho_ONVe3C3qET":{"choice":"If/Else","order":2,"correct":false},"cho_qOthImSye2":{"choice":"Switch/Case","correct":true,"order":1}},"order":4,"question":"Qual é a estrutura de controle de fluxo usada quando há várias condições possíveis?"},"que_ZhYFhAKWh8":{"choices":{"cho_agq3ATcbMr":{"correct":false,"choice":"Continue","order":2},"cho_ZhTo98eEet":{"choice":"Break","correct":true,"order":1},"cho_tcBVm6y6hE":{"correct":false,"order":3,"choice":"Return"}},"question":"Qual é o comando usado em laços de repetição para interromper completamente a execução do laço quando uma determinada condição é atendida?","order":6},"que_HyF1T4wTld":{"choices":{"cho_LzeiOPbIuc":{"order":3,"choice":"Objeto","correct":false},"cho_apD4B3Done":{"correct":false,"order":2,"choice":"Variável"},"cho_PEZO47JiPj":{"order":1,"choice":"Função","correct":true}},"order":5,"question":"Qual é a ferramenta usada para agrupar um conjunto de instruções para realizar uma tarefa específica?"},"que_UgpighxJrk":{"question":"Qual é a definição de lógica de programação?","order":1,"choices":{"cho_Lo03ZNODZ0":{"order":1,"correct":true,"choice":"A habilidade de pensar de forma estruturada e organizada para resolver problemas por meio da escrita de algoritmos."},"cho_025Bwxuc76":{"order":2,"choice":"A habilidade de escrever código complexo sem bugs.","correct":false},"cho_GKSj1W0AaY":{"choice":"A habilidade de criar interfaces gráficas avançadas.","order":3,"correct":false}}}},"type":"quiz"}},"order":6,"short":"Questionário"},"module1":{"slug":"introducao","order":1,"blocks":{"rX0Qbp6beH":{"order":1,"html":"<p>O módulo de introdução à lógica de programação é essencial para os iniciantes em programação. Nesta primeira etapa, o aluno aprenderá os conceitos fundamentais para a criação de algoritmos e a resolução de problemas. </p>\n<h2>O que é Lógica de Programação?</h2>\n<p>Antes de avançarmos, é importante entender o que é lógica de programação. Em termos simples, a lógica de programação é a habilidade de pensar de forma estruturada e organizada para resolver problemas por meio da escrita de algoritmos. Algoritmo é uma sequência de passos que um computador pode seguir para realizar uma determinada tarefa.</p>\n<h2>Variáveis e Tipos de Dados</h2>\n<p>Na lógica de programação, uma variável é usada para armazenar um valor que pode ser usado posteriormente no código. Neste módulo, você aprenderá como declarar variáveis e os diferentes tipos de dados que podem ser atribuídos a elas, como números inteiros, decimais, strings e booleanos.</p>\n<h2>Operadores Aritméticos e Operações Lógicas</h2>\n<p>Os operadores aritméticos são usados para realizar cálculos matemáticos em programas, como soma, subtração, multiplicação e divisão. Já as operações lógicas são usadas para comparar valores e tomar decisões em um programa. Neste módulo, você aprenderá sobre os diferentes operadores aritméticos e lógicos disponíveis em linguagens de programação.</p>\n<h2>Estruturas Condicionais</h2>\n<p>As estruturas condicionais são usadas para tomar decisões em um programa. Por exemplo, se um determinado valor for verdadeiro, o programa executará uma ação específica. Caso contrário, outra ação será executada. Neste módulo, você aprenderá sobre as estruturas condicionais mais comuns, como if/else e switch/case.</p>\n<h2>Laços de Repetição</h2>\n<p>Laços de repetição são usados para executar um bloco de código várias vezes. Eles são úteis quando você precisa realizar uma tarefa repetitiva, como imprimir os números de 1 a 100. Neste módulo, você aprenderá sobre os diferentes tipos de laços de repetição disponíveis em linguagens de programação, incluindo while, do/while e for.</p>\n<h2>Funções</h2>\n<p>As funções são blocos de código que podem ser chamados várias vezes em um programa para realizar uma tarefa específica. Elas são úteis porque permitem que você reutilize o mesmo código várias vezes sem ter que escrevê-lo novamente. Neste módulo, você aprenderá como criar funções em linguagens de programação e como utilizá-las em seu código.</p>","type":"html"},"AY1G2lYvo7":{"order":2,"type":"highlight","content":"A lógica de programação é uma habilidade fundamental para qualquer pessoa que queira se tornar um programador. Neste módulo, vimos os conceitos básicos que você precisa saber para começar a escrever algoritmos e resolver problemas por meio da programação. Com esses conhecimentos em mãos, você estará pronto para avançar para os módulos seguintes e aprender a criar programas mais complexos.","title":"Conclusão - Introdução à Lógica de Programação"}},"name":"Introdução à Lógica de Programação","short":"Introdução"}}}