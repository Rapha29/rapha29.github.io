{"version":4,"category":"Computer Science","viewCount":0,"overview":{"title":"Visão geral","content":"Este curso é projetado para introduzir os alunos aos conceitos fundamentais da Programação Orientada a Objeto. Os alunos aprenderão a criar classes, objetos e métodos; encapsular dados e comportamento em objetos; utilizar herança, polimorfismo e interfaces para criar hierarquias de classes complexas; e implementar padrões de projeto comuns para solucionar problemas de design de software. O curso também abordará as melhores práticas de programação orientada a objetos e como aplicá-las em projetos reais."},"conclusion":{"content":"Parabéns por concluir este curso! Você deu um passo importante para liberar todo o seu potencial. Concluir este curso não é apenas adquirir conhecimento; trata-se de colocar esse conhecimento em prática e causar um impacto positivo no mundo ao seu redor.","title":"Conclusão"},"headline":"Aprenda os conceitos fundamentais da Programação Orientada a Objeto (POO)","keywords":{"keyword3":"Inheritance","keyword5":"Design Patterns","keyword1":"Object-Oriented Programming","keyword4":"Polymorphism","keyword2":"Classes"},"createdAt":"2023-05-31T06:17:44.336Z","sections":{"quiz":{"name":"Questionário","headline":"Verifique seu conhecimento respondendo a algumas perguntas","order":6,"short":"Questionário","slug":"quiz","blocks":{"ruZmFmkuYF":{"order":1,"questions":{"que_4aWWRAXkqV":{"order":1,"question":"O que é a Programação Orientada a Objetos?","choices":{"cho_UKBRYDMhqU":{"choice":"Um paradigma de programação que se concentra em funções.","correct":false,"order":1},"cho_U8pST82lbY":{"order":2,"choice":"Um paradigma de programação que se concentra em objetos e suas interações.","correct":true},"cho_nkPYN49NP0":{"order":3,"correct":false,"choice":"Um paradigma de programação que se concentra em dados e suas manipulações."}}},"que_TsfVTWgeDa":{"question":"O que é herança na POO?","order":2,"choices":{"cho_tOZEo1mgpc":{"correct":false,"order":3,"choice":"A capacidade de uma classe de criar objetos de outras classes."},"cho_BmyqgelPRv":{"order":2,"choice":"A capacidade de uma classe filha herdar propriedades e comportamentos de uma classe pai.","correct":true},"cho_jJXAW0RTJZ":{"choice":"A capacidade de um objeto de assumir várias formas.","correct":false,"order":1}}},"que_g1B29A3fgj":{"order":5,"question":"Qual padrão de projeto é utilizado para criar objetos de várias classes diferentes, mas quer manter a coesão entre eles?","choices":{"cho_cOj3b4WTS0":{"choice":"Abstract Factory","order":1,"correct":true},"cho_xLsFkCsybF":{"choice":"Observer","correct":false,"order":3},"cho_BjLAVdw2kE":{"choice":"Command","correct":false,"order":2}}},"que_UMgFE9rK0H":{"choices":{"cho_3qhcMsOAfn":{"correct":false,"choice":"Factory Method","order":1},"cho_re8YlTo1H9":{"correct":false,"order":3,"choice":"Observer"},"cho_xNruhUM2PO":{"correct":true,"order":2,"choice":"Adapter"}},"question":"Qual padrão de projeto é utilizado para encapsular uma classe existente em uma nova interface?","order":4},"que_UNBbsXBNZW":{"order":6,"choices":{"cho_cx1BUb0xw4":{"choice":"Observer","correct":true,"order":3},"cho_ugm8tB4zuj":{"order":2,"correct":false,"choice":"Adapter"},"cho_nFbKM7SvM7":{"order":1,"correct":false,"choice":"Factory Method"}},"question":"Qual padrão de projeto é utilizado para notificar vários observadores quando um objeto for atualizado?"},"que_gAs8GTv1w6":{"order":3,"choices":{"cho_V6vNvjPOii":{"choice":"A capacidade de uma classe de criar objetos de outras classes.","correct":false,"order":3},"cho_btzWziQ1jA":{"order":1,"correct":true,"choice":"A capacidade de um objeto de assumir várias formas."},"cho_cv6WJK3m7m":{"order":2,"correct":false,"choice":"A capacidade de uma classe filha herdar propriedades e comportamentos de uma classe pai."}},"question":"O que é polimorfismo na POO?"}},"type":"quiz"}}},"wrapup":{"order":5,"blocks":{"rNzx8CeuiM":{"items":{"con_GcPP20SMKX":{"content":"A herança e o polimorfismo são conceitos importantes da POO que permitem criar hierarquias de classes complexas e tornar o código mais flexível. A herança permite que uma classe filha herde propriedades e comportamentos de uma classe pai, enquanto o polimorfismo permite que um objeto de uma classe seja tratado como um objeto de sua classe ou como um objeto de qualquer uma de suas subclasses. Utilizando esses conceitos, é possível criar código mais modular e fácil de manter.","title":"Herança e Polimorfismo","order":2},"con_RnHeaAwnn9":{"content":"Os padrões de projeto são soluções comprovadas para problemas recorrentes no desenvolvimento de software. Neste módulo, exploramos alguns dos padrões mais comuns da POO, incluindo padrões de criação, estruturais e comportamentais. Cada padrão tem seu próprio conjunto de benefícios e é útil em situações diferentes. Ao aprender esses padrões, você poderá escrever código mais limpo, modular e reutilizável.","order":3,"title":"Padrões de Projeto"},"con_nXu0yHxETQ":{"content":"A POO é um paradigma de programação poderoso que tem muitas vantagens sobre a programação procedimental. Ao entender os conceitos fundamentais da POO, você estará bem posicionado para criar software robusto e fácil de manter.","title":"Introdução à POO","order":1}},"type":"list","order":1}},"headline":"Vamos revisar o que acabamos de ver até agora","name":"Resumo","slug":"wrapup","short":"Resumo"},"module1":{"order":1,"short":"Introdução","slug":"introducao","name":"Introdução à POO","blocks":{"uFByrWOVcr":{"order":1,"type":"html","html":"<p>A Programação Orientada a Objetos (POO) é um paradigma de programação que se concentra em objetos e suas interações para resolver problemas de software. Em contraste com a programação procedimental, onde o foco é na execução de funções, a POO lida com a criação de objetos que possuem dados e comportamentos.</p>\n<h2>Conceitos Fundamentais da POO</h2>\n<p>A POO utiliza alguns conceitos fundamentais para modelar objetos do mundo real no software:</p>\n<h3>Classe</h3>\n<p>Uma classe é uma estrutura que define as propriedades e comportamentos de um objeto. Uma classe serve como modelo ou molde para criar objetos.</p>\n<h3>Objeto</h3>\n<p>Um objeto é uma instância de uma classe. Ele possui seus próprios dados e comportamentos únicos.</p>\n<h3>Encapsulamento</h3>\n<p>Encapsulamento é o conceito de esconder os detalhes internos de um objeto dos usuários externos. Propriedades e métodos privados só podem ser acessados dentro da classe, enquanto as propriedades e métodos públicos podem ser acessados de fora da classe.</p>\n<h3>Herança</h3>\n<p>Herança é a capacidade de uma classe herdar propriedades e comportamentos de outra classe. A classe que herda é chamada de classe filha ou subclasse, enquanto a classe de onde ela herda é chamada de classe pai ou superclasse.</p>\n<h3>Polimorfismo</h3>\n<p>Polimorfismo é a capacidade de um objeto de assumir várias formas. Na POO, isso significa que um objeto pode ser tratado como um objeto de sua classe ou como um objeto de qualquer uma de suas subclasses.</p>\n<h2>Vantagens da POO</h2>\n<p>A POO oferece algumas vantagens significativas em relação à programação procedimental:</p>\n<h3>Reutilização de Código</h3>\n<p>A POO permite que você reutilize código existente através do conceito de herança. Isso significa que, em vez de escrever o mesmo código várias vezes, você pode criar uma classe pai comum e fazer com que as subclasses a herdem.</p>\n<h3>Facilidade de Manutenção</h3>\n<p>A encapsulação permite que você faça mudanças em uma classe sem afetar outras partes do código que dependem dela. Isso torna a manutenção mais fácil e ajuda a evitar erros.</p>\n<h3>Abstração</h3>\n<p>A POO utiliza abstração para representar objetos do mundo real no software. Isso permite que você se concentre nos aspectos importantes do objeto e oculte os detalhes irrelevantes.</p>"},"ivn8q29KTk":{"type":"highlight","title":"Conclusão - Introdução à POO","order":2,"content":"A POO é um paradigma de programação poderoso que tem muitas vantagens sobre a programação procedimental. Ao entender os conceitos fundamentais da POO, você estará bem posicionado para criar software robusto e fácil de manter."}}},"practice":{"blocks":{"OGFslMKObd":{"order":2,"items":{"EuqJdx9bbd":{"title":"Observer","content":"Implemente o padrão Observer para notificar vários observadores quando um objeto for atualizado. Crie uma classe Observador com um método de atualização e uma classe Sujeito que mantenha uma lista de observadores e notifique-os sempre que for atualizada.","order":6},"CpkPE3p0W9":{"content":"Implemente o padrão Factory Method para criar objetos de diferentes formas geométricas - círculo, retângulo e quadrado. Use uma classe abstrata para definir a interface de criação e subclasses para implementar a criação de cada tipo de forma geométrica.","order":5,"title":"Factory Method"},"EeJTbWw4Pf":{"order":1,"title":"Criando Classes e Objetos","content":"Crie uma classe para representar um carro com propriedades como marca, modelo e ano. Crie um objeto dessa classe e imprima suas propriedades."},"Rp1NvrNf6F":{"content":"Crie uma classe para representar um banco com propriedades como nome e saldo. Implemente métodos para depositar e sacar dinheiro da conta. Utilize o encapsulamento para proteger o saldo da conta de acesso direto.","title":"Encapsulamento","order":2},"I4GXjU4r6O":{"content":"Crie um método que receba um objeto Animal e chame seu método fazer_barulho. Crie objetos das subclasses de cachorro e gato e passe-os para esse método para testar o polimorfismo.","order":4,"title":"Polimorfismo"},"sy4CQckSf3":{"order":3,"content":"Crie uma classe pai chamada Animal, que tenha uma propriedade chamada nome e um método abstrato chamado fazer_barulho. Crie duas subclasses - uma para representar um cachorro e outra para representar um gato. Implemente o método fazer_barulho nas subclasses de acordo com o som que cada animal faz.","title":"Herança"}},"type":"list"},"hDLLCyU0c0":{"type":"html","order":1,"html":"<p>Nesta lição, colocaremos a teoria em prática por meio de atividades práticas. Clique nos itens abaixo para conferir cada exercício e desenvolver habilidades práticas que o ajudarão a ter sucesso na disciplina.</p>"}},"slug":"practice","order":4,"headline":"Vamos colocar seus conhecimentos em prática","name":"Exercícios Práticos","short":"Prática"},"module3":{"name":"Padrões de Projeto","order":3,"short":"Padrões","blocks":{"ls3jURfRB9":{"content":"Os padrões de projeto são soluções comprovadas para problemas recorrentes no desenvolvimento de software. Neste módulo, exploramos alguns dos padrões mais comuns da POO, incluindo padrões de criação, estruturais e comportamentais. Cada padrão tem seu próprio conjunto de benefícios e é útil em situações diferentes. Ao aprender esses padrões, você poderá escrever código mais limpo, modular e reutilizável.","type":"highlight","order":2,"title":"Conclusão - Padrões de Projeto"},"y0c1BjuJhs":{"order":1,"html":"<p>Os padrões de projeto são soluções comprovadas para problemas recorrentes no desenvolvimento de software. Eles foram criados para ajudar os desenvolvedores a escrever código mais limpo, modular e reutilizável. Neste módulo, vamos explorar alguns dos padrões de projeto mais comuns da Programação Orientada a Objetos (POO).</p>\n<h2>Padrões de Criação</h2>\n<p>Os padrões de criação são utilizados para instanciar objetos de classes de maneira eficiente e flexível. Alguns exemplos de padrões de criação incluem:</p>\n<h3>Factory Method</h3>\n<p>O Factory Method é um padrão que define uma interface para criar objetos em uma superclasse, mas permite que as subclasses alterem o tipo de objetos que serão criados. Isso permite que o cliente use uma classe abstrata para criar objetos sem saber qual subclasse será usada.</p>\n<h3>Abstract Factory</h3>\n<p>O Abstract Factory é um padrão que fornece uma interface para criar famílias de objetos relacionados ou dependentes sem especificar suas classes concretas. É útil quando você precisa criar objetos de várias classes diferentes, mas quer manter a coesão entre eles.</p>\n<h2>Padrões Estruturais</h2>\n<p>Os padrões estruturais lidam com a composição de classes e objetos para formar estruturas maiores. Alguns exemplos de padrões estruturais incluem:</p>\n<h3>Adapter</h3>\n<p>O Adapter é um padrão que permite que duas interfaces incompatíveis trabalhem juntas. Ele envolve uma classe existente em uma nova interface e permite que ela seja usada por outra classe sem precisar modificar o código dessa segunda classe.</p>\n<h3>Proxy</h3>\n<p>O Proxy é um padrão que fornece um substituto para um objeto que é muito caro ou difícil de criar. Ele usa um objeto intermediário para controlar o acesso ao objeto real e pode ser usado para fazer cache, controle de acesso ou monitoramento.</p>\n<h2>Padrões Comportamentais</h2>\n<p>Os padrões comportamentais lidam com a comunicação entre objetos e classes. Alguns exemplos de padrões comportamentais incluem:</p>\n<h3>Observer</h3>\n<p>O Observer é um padrão que define uma dependência um-para-muitos entre objetos, de modo que quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente.</p>\n<h3>Command</h3>\n<p>O Command é um padrão que encapsula uma solicitação como um objeto, permitindo que você parametrize clientes com diferentes solicitações, enfileire ou registre solicitações e suporte operações que podem ser desfeitas.</p>","type":"html"}},"slug":"padroes"},"module2":{"blocks":{"w0YfhGHGAN":{"type":"highlight","content":"A herança e o polimorfismo são conceitos importantes da POO que permitem criar hierarquias de classes complexas e tornar o código mais flexível. A herança permite que uma classe filha herde propriedades e comportamentos de uma classe pai, enquanto o polimorfismo permite que um objeto de uma classe seja tratado como um objeto de sua classe ou como um objeto de qualquer uma de suas subclasses. Utilizando esses conceitos, é possível criar código mais modular e fácil de manter.","title":"Conclusão - Herança e Polimorfismo","order":2},"DeBUjJWEm4":{"html":"<p>A herança e o polimorfismo são conceitos fundamentais da Programação Orientada a Objetos (POO) que permitem criar hierarquias de classes complexas e tornar o código mais flexível.</p>\n<h2>Herança</h2>\n<p>A herança é um mecanismo que permite que uma classe filha obtenha as propriedades e comportamentos de uma classe pai. A classe pai é referida como superclasse ou classe base, enquanto a classe filha é referida como subclasse ou classe derivada.</p>\n<p>Para demonstrar a herança, vamos considerar um exemplo com animais:</p>\n<pre><code class=\"language-python\">class Animal:\n    def __init__(self, nome, idade):\n        self.nome = nome\n        self.idade = idade\n    \n    def fazer_barulho(self):\n        pass\n\nclass Cachorro(Animal):\n    def fazer_barulho(self):\n        print(&quot;Au au!&quot;)\n\nclass Gato(Animal):\n    def fazer_barulho(self):\n        print(&quot;Miau!&quot;)\n</code></pre>\n<p>No exemplo acima, temos uma classe Animal que contém duas propriedades (nome e idade) e um método abstrato (fazer_barulho) que será implementado pelas subclasses. As subclasses Cachorro e Gato herdam as propriedades e o método abstrato da classe Animal e implementam o método fazer_barulho de forma específica para cada uma delas.</p>\n<p>Note que a sintaxe para herança em Python é <code>class Subclasse(Superclasse):</code>.</p>\n<h2>Polimorfismo</h2>\n<p>O polimorfismo, por sua vez, é a capacidade de um objeto de assumir várias formas. Na POO, isso significa que um objeto pode ser tratado como um objeto de sua classe ou como um objeto de qualquer uma de suas subclasses.</p>\n<p>No exemplo anterior, podemos utilizar o polimorfismo para criar um método que receba um objeto Animal e faça-o fazer_barulho:</p>\n<pre><code class=\"language-python\">def fazer_animal_fazer_barulho(animal):\n    animal.fazer_barulho()\n\ncachorro = Cachorro(&quot;Rex&quot;, 3)\ngato = Gato(&quot;Felix&quot;, 2)\n\nfazer_animal_fazer_barulho(cachorro) # imprime &quot;Au au!&quot;\nfazer_animal_fazer_barulho(gato) # imprime &quot;Miau!&quot;\n</code></pre>\n<p>O método <code>fazer_animal_fazer_barulho</code> recebe um objeto Animal como parâmetro e chama seu método fazer_barulho. Como cada subclasse implementa esse método de forma diferente, o resultado será diferente dependendo do tipo de objeto passado.</p>","order":1,"type":"html"}},"slug":"heranca","name":"Herança e Polimorfismo","short":"Herança","order":2}},"name":"Programação Orientada a Objeto","colorScheme":"red","id":"UUkLaf7LVq9P8NIlu2Dm","languageId":"pt-BR"}